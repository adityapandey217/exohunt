# Generated by Django 5.2.4 on 2025-10-05 16:13

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="KOIParameters",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("kepid", models.IntegerField(db_index=True, unique=True)),
                (
                    "koi_period",
                    models.FloatField(
                        blank=True, help_text="Orbital period (days)", null=True
                    ),
                ),
                (
                    "koi_duration",
                    models.FloatField(
                        blank=True, help_text="Transit duration (hours)", null=True
                    ),
                ),
                (
                    "koi_depth",
                    models.FloatField(
                        blank=True, help_text="Transit depth (ppm)", null=True
                    ),
                ),
                (
                    "koi_prad",
                    models.FloatField(
                        blank=True,
                        help_text="Planetary radius (Earth radii)",
                        null=True,
                    ),
                ),
                (
                    "koi_ror",
                    models.FloatField(
                        blank=True, help_text="Planet-star radius ratio", null=True
                    ),
                ),
                (
                    "koi_model_snr",
                    models.FloatField(
                        blank=True, help_text="Transit signal-to-noise", null=True
                    ),
                ),
                (
                    "koi_num_transits",
                    models.IntegerField(
                        blank=True, help_text="Number of transits", null=True
                    ),
                ),
                (
                    "koi_insol",
                    models.FloatField(
                        blank=True, help_text="Insolation flux (Earth flux)", null=True
                    ),
                ),
                (
                    "koi_dor",
                    models.FloatField(
                        blank=True,
                        help_text="Planet-star distance over star radius",
                        null=True,
                    ),
                ),
                (
                    "koi_steff",
                    models.FloatField(
                        blank=True,
                        help_text="Stellar effective temperature (K)",
                        null=True,
                    ),
                ),
                (
                    "koi_slogg",
                    models.FloatField(
                        blank=True, help_text="Stellar surface gravity", null=True
                    ),
                ),
                (
                    "koi_srad",
                    models.FloatField(
                        blank=True, help_text="Stellar radius (solar radii)", null=True
                    ),
                ),
                (
                    "koi_smass",
                    models.FloatField(
                        blank=True, help_text="Stellar mass (solar masses)", null=True
                    ),
                ),
                (
                    "koi_kepmag",
                    models.FloatField(
                        blank=True, help_text="Kepler magnitude", null=True
                    ),
                ),
                (
                    "koi_count",
                    models.IntegerField(
                        blank=True, help_text="Number of KOIs for this star", null=True
                    ),
                ),
                (
                    "koi_score",
                    models.FloatField(
                        blank=True, help_text="Disposition score", null=True
                    ),
                ),
                (
                    "koi_pdisposition",
                    models.CharField(
                        blank=True,
                        help_text="Pipeline disposition",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "koi_disposition",
                    models.CharField(
                        blank=True,
                        help_text="Final disposition",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "KOI Parameters",
                "verbose_name_plural": "KOI Parameters",
            },
        ),
        migrations.CreateModel(
            name="ModelMetrics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("model_version", models.CharField(db_index=True, max_length=50)),
                ("accuracy", models.FloatField()),
                ("f1_score_weighted", models.FloatField()),
                ("precision_false_positive", models.FloatField()),
                ("precision_candidate", models.FloatField()),
                ("precision_confirmed", models.FloatField()),
                ("recall_false_positive", models.FloatField()),
                ("recall_candidate", models.FloatField()),
                ("recall_confirmed", models.FloatField()),
                ("f1_false_positive", models.FloatField()),
                ("f1_candidate", models.FloatField()),
                ("f1_confirmed", models.FloatField()),
                ("roc_auc_false_positive", models.FloatField(blank=True, null=True)),
                ("roc_auc_candidate", models.FloatField(blank=True, null=True)),
                ("roc_auc_confirmed", models.FloatField(blank=True, null=True)),
                ("confusion_matrix", models.JSONField()),
                ("validation_set_size", models.IntegerField()),
                ("training_date", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name_plural": "Model Metrics",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AnalysisSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(default="Untitled Session", max_length=200)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="BatchJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        db_index=True,
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("total_files", models.IntegerField(default=0)),
                ("processed_files", models.IntegerField(default=0)),
                ("failed_files", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "results_file",
                    models.FileField(blank=True, null=True, upload_to="batch_results/"),
                ),
                ("error_log", models.TextField(blank=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LightCurveFile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        upload_to="lightcurves/%Y/%m/%d/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["fits", "fit", "fits.gz"]
                            )
                        ],
                    ),
                ),
                ("kepid", models.IntegerField(blank=True, db_index=True, null=True)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("flux_points", models.IntegerField(blank=True, null=True)),
                ("duration_days", models.FloatField(blank=True, null=True)),
                ("data_quality_score", models.FloatField(blank=True, null=True)),
                ("gaps_detected", models.IntegerField(default=0)),
                ("flux_type", models.CharField(default="PDCSAP_FLUX", max_length=20)),
                ("cache_path", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="Prediction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "predicted_class",
                    models.IntegerField(
                        choices=[
                            (0, "FALSE POSITIVE"),
                            (1, "CANDIDATE"),
                            (2, "CONFIRMED"),
                        ],
                        db_index=True,
                    ),
                ),
                (
                    "predicted_class_name",
                    models.CharField(db_index=True, max_length=20),
                ),
                ("prob_false_positive", models.FloatField()),
                ("prob_candidate", models.FloatField()),
                ("prob_confirmed", models.FloatField()),
                (
                    "confidence",
                    models.FloatField(db_index=True, help_text="Max probability"),
                ),
                ("model_version", models.CharField(default="v1.0", max_length=50)),
                (
                    "processing_time_ms",
                    models.IntegerField(help_text="Inference time in milliseconds"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("batch_id", models.UUIDField(blank=True, db_index=True, null=True)),
                (
                    "koi_params",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.koiparameters",
                    ),
                ),
                (
                    "light_curve",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="predictions",
                        to="api.lightcurvefile",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="predictions",
                        to="api.analysissession",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ExplainabilityData",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "gradcam_heatmap",
                    models.JSONField(
                        blank=True, help_text="1D array of attention weights", null=True
                    ),
                ),
                (
                    "shap_values",
                    models.JSONField(
                        blank=True, help_text="Dict of feature: SHAP value", null=True
                    ),
                ),
                (
                    "feature_importance",
                    models.JSONField(
                        blank=True,
                        help_text="Dict of feature: importance score",
                        null=True,
                    ),
                ),
                (
                    "attention_weights",
                    models.JSONField(
                        blank=True, help_text="Attention scores across time", null=True
                    ),
                ),
                (
                    "uncertainty_epistemic",
                    models.FloatField(
                        blank=True, help_text="Model uncertainty", null=True
                    ),
                ),
                (
                    "uncertainty_aleatoric",
                    models.FloatField(
                        blank=True, help_text="Data uncertainty", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "prediction",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="explanation",
                        to="api.prediction",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TransitDetection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "start_time",
                    models.FloatField(help_text="Transit start (BJD or relative time)"),
                ),
                ("end_time", models.FloatField(help_text="Transit end")),
                ("duration_hours", models.FloatField()),
                (
                    "depth_ppm",
                    models.FloatField(help_text="Transit depth in parts per million"),
                ),
                ("snr", models.FloatField(help_text="Signal-to-noise ratio")),
                ("period_days", models.FloatField(blank=True, null=True)),
                ("period_confidence", models.FloatField(blank=True, null=True)),
                (
                    "is_anomaly",
                    models.BooleanField(
                        default=False, help_text="Flagged as potential artifact"
                    ),
                ),
                ("detection_algorithm", models.CharField(default="BLS", max_length=50)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "light_curve",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transits",
                        to="api.lightcurvefile",
                    ),
                ),
            ],
            options={
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="UserFeedback",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "verdict",
                    models.CharField(
                        choices=[
                            ("agree", "Agree with prediction"),
                            ("disagree", "Disagree with prediction"),
                            ("uncertain", "Uncertain"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "corrected_class",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "FALSE POSITIVE"),
                            (1, "CANDIDATE"),
                            (2, "CONFIRMED"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Expert notes on the decision"
                    ),
                ),
                (
                    "confidence_in_correction",
                    models.IntegerField(
                        default=3,
                        help_text="1-5 scale, how confident is the user in their correction",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("used_in_training", models.BooleanField(default=False)),
                (
                    "prediction",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to="api.prediction",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="lightcurvefile",
            index=models.Index(
                fields=["kepid", "uploaded_at"], name="api_lightcu_kepid_18b8c5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="prediction",
            index=models.Index(
                fields=["predicted_class", "confidence"],
                name="api_predict_predict_08d762_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="prediction",
            index=models.Index(
                fields=["batch_id", "created_at"], name="api_predict_batch_i_4447c8_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userfeedback",
            unique_together={("prediction", "user")},
        ),
    ]
